## Generating Language-Specific Code from .proto

-- for python -- (.proto -> backbone)
python -m grpc_tools.protoc -I=proto --python_out=. --grpc_python_out=. proto/service.proto

-- for Java gradlew -- (.proto -> backbone)

1. put build.gradle in root and define dependencies 
2. keep .proto file in "./src/main/proto"
3. run "./gradlew clean build" to generate backbone code from .proto file 
4. backbone code in A) ./build/generated/source/proto/main/grpc/com/example/grpc/MyServiceGrpc.java and B) ./build/generated/source/proto/main/java/com/example/grpc/ServiceProto.java
4. run "./gradlew run" to run the Java server 

-- run java client -- 
./gradlew run -PmainClass=com.example.grpc.JavaClient

python -m grpc_tools.protoc \
  --proto_path=. \
  --python_out=. \
  --grpc_python_out=. \
  swim.proto

python -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. swim.proto


python fd_node.py --port 50051 --membership 50052 50053 50054 50055

python fd_node.py --port 50052 --membership 50051 50053 50054 50055

python fd_node.py --port 50053 --membership 50051 50052 50054 50055

python fd_node.py --port 50054 --membership 50051 50052 50053 50055

python fd_node.py --port 50055 --membership 50051 50052 50053 50054

./gradlew run --args="60051 60052 60053 60054 60055"

./gradlew run --args="60052 60051 60053 60054 60055"

./gradlew run --args="60053 60051 60052 60054 60055"

./gradlew run --args="60054 60051 60052 60053 60055"

./gradlew run --args="60055 60051 60052 60053 60054"

60052 60051 60053 60054 60055
